1. elia : kita bisa membuat alias atau singkatan ketika import misal data -> d, interface mirip polymorphism pada OOP, dengan nama method sama dengan spesifikasi berbeda.
2. fajar : interface adalah kumpulan dari method daripada dipanggil masing masing bisa dijadikan satu, pak edo: tidak memiliki implementation( method/ abstract function, tujuannya membuat kontrak, disepakati oleh struct atau custom type but majority struct yang mengimplementasikannya) 
3. fira : penerapan pointer pada method, agar bisa pass by reference, maksudnya bisa mengubah.
ian : belajar tentang embedded interface, maksudnya gabungan dari dua interface atau lebih yang akan menampung method.
naja : interface kalau di OOP seperti polymorphism.
irsa : interface termasuk tipe data, objek yang tipe data interface zero value nya nil 
joshua : halo smack down, kita dituntun menjadi pribadi teliti, misal untuk import function dari beda package, seperti teliti nama method, interface juga harus teliti mendaftarkan semua methodnya. kak jut: agar ketika interface dipanggil tidak error
kelvin : advice pak edo: interface tidak boleh tidak terlalu gendut, bisa di split, sudah baca maks 5-6 method di interface. source: https://itnext.io/interfaces-in-go-5c6e38b81b41
kemal : dimana struct gabisa diexport karena private, struct bisa jadi receiver di method, dibuat public (kapitalisasi huruf awal) dulu agar bisa diexport
kholis : casting untuk mendapatkan field yang diimplement di interface, lebih baik getter method, kalau banyak juga dibuat interface tersendiri.
mahatma : mencoba struct bisa memanggil interface.
maulana : import package bisa dibuat alias untuk memudahkan dan mempersingkat. ex : fmt -> f, kak jut: package juga bisa diignore cukup gunakan _, juga berlaku di package, implementasi waktu masuk ke db. wajib diimport tapi tidak digunakan
monita : komponen di pakcage lain yang diimport, bisa jadi selevel tanpa nama package dengan menulis tanda . ketika import packagenya. kak jut : tidak rekomen dengan import prefix
dipta : interface sama halnya struct, bisa ada embedded dengan cara penerapan yang sama dengan struct
rofik : kemarin salah satunya belajar tentang penulisan method, jadi misal punya type Greetung struct itu cara penulisan method nya bisa seperti func(g Greeting) SayHi() Greeting.
nugroho : belajar method bisa dichaining, dengan cara mengembalikan structnya.
niqma : interface diibaratkan sebuah kontrak yang harus dipenuhi tidak boleh kurang, tapi kalau tambah method lain diperbolehkan.
novita : ada bitang * di method, maksudnya pointer, agar pass by reference agar tidak boros memory, karena harus dicopy.
renaldi : di method nama fungsi bisa sama namun harus beda receiver
samuel : golang tidak punya overload dan overwi=rite function.
steven : pakai interface karena 3 hal, method tertentu (SUARA HILANG DI SAYA)
utsman : buat beberapa file go berbeda package, untuk memanggil sesuatu dari package lain harus diimport terlebih dahulu.
vidya : kedengeran ga mas? kalau dari aku mungkin kemarin pas challenge, melakukan kesalahan circle sama square (beda entitas) ditaruh dibeda file, sebaiknya kalau beda entitas bisa dipisah agar lebih ciamik.
wilbert : (SUARA HILANG LAGI :() interface dalam interface dari struct yang tidak memenuhi kontrak bisa direturn panic("")
yayah : method ketika dipanggil berada dipackage lain mai dipanggil di package main, jangan lupa import. dipanggil dengan cara package.struct.method
yurham : cara-cara memberikan informasi dari luar code, dengan cara scanner, os.args, flag, environment variable, file, gunakan API service config
ziana : case sensitive terkait penamaan variable, agar exported diawali huruf kapital.
alvian : implement interface untuk struct harus sesuai kontrak, untuk akses field struct pakai casting, atau buat getter. pak edo : jgn takut melakukan refactor
astika : kemarin belajar penamaan receiver, penamaannya bebas tetapi umumnya huruf awal dari struct. misal (g Greeting)
bagas : menambahkan yurham, belajar untuk pass argument via terminal dengan os.Args (SUARA HILANG), kelemahannya berurutan, dengan flag agar tidak apa-apa bila tidak berurutan.
barkah : perbedaan type property (Kuang jelas)
christian : interface ada istilah type switching, tergantung jedis interface. masukin case by case untuk tipe interface yang digunakan.
tami : harus teliti, seperti return dari method dan parameter. interface ga peduli tipe data, tapi dia peduli tujuan yang ingin dilakukan.
dona : nama method harus beda jika receivernya sama karena bingung ketika method chaining. kak jut: error juga
